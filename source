-- [ Locals, Functions ] --

-- UI Locals
local UIS = game:GetService('UserInputService')
local TweenService = game:GetService('TweenService')
local UI = game:GetObjects('rbxassetid://6925099111&version=8')[1]
local Main = UI['Main']
local Pages = Main['Pages']
local Side = Main['Side']
local ButtonLayout = Side['Layout']
local Layout = Pages['UIPageLayout']
local FpsLabel = Side['Label']
-- / Buttons
local MainButton = ButtonLayout['mButton']
local VisualsButton = ButtonLayout['vButton']
local SettingsButton = ButtonLayout['sButton']
-- / Pages
local Page1 = Pages['Page1']
local Page2 = Pages['Page2']
local Page3 = Pages['Page3']
-- End of UI locals

-- Other locals
local Colors = {}
local func;
local HitPart = 'Head'
local cc = game.Workspace.CurrentCamera
local Mouse = game.Players.LocalPlayer:GetMouse()
local Plr = game.Players.LocalPlayer
local Players = game.Players
Mouse = Plr:GetMouse()
local Camera = game.Workspace.CurrentCamera
local TeamCheck = true
local ESP = {
    Enabled = false,
    Boxes = true,
    BoxShift = CFrame.new(0,-1.5,0),
	BoxSize = Vector3.new(4,6,0),
    Color = Color3.fromRGB(104, 67, 150),
    FaceCamera = false,
    Names = false,
    TeamColor = false,
    Thickness = 2,
    AttachShift = 1,
    TeamMates = false,
    Players = true,
    
    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {}
}
local plrs = game.Players
local plr = plrs.LocalPlayer
local mouse = plr:GetMouse()
local V3new = Vector3.new
local WorldToViewportPoint = Camera.WorldToViewportPoint
local boxBase = {}
local ee = getrawmetatable(game)
local namecall = ee.__namecall
setreadonly(ee, false)
-- End of Other locals

-- Functions
players = game:GetService('Players')
plr = players.LocalPlayer
mouse = plr:GetMouse()
camera = game.Workspace.CurrentCamera
local teamcheck = true

local function ClosestPlayerToMouse()
    local target = nil
    local dist = 25
    for i,v in pairs(players:GetPlayers()) do
        if v.Name ~= plr.Name then
            if v.Character and v.Character:FindFirstChild('Humanoid') and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild('HumanoidRootPart') and teamcheck and v.TeamColor ~= plr.TeamColor then
                local screenpoint = camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
                local check = (Vector2.new(mouse.X,mouse.Y)-Vector2.new(screenpoint.X,screenpoint.Y)).magnitude
                if check < dist then
                    target  = v
                    dist = check
                end
            end
        end
    end
    return target
end

local function Draw(obj, props)
	local new = Drawing.new(obj)
	props = props or {}
	for i,v in pairs(props) do
		new[i] = v
	end
	return new
end

function ESP:GetTeam(p)
	local ov = self.Overrides.GetTeam
	if ov then
		return ov(p)
	end
	return p and p.Team
end

function ESP:IsTeamMate(p)
    local ov = self.Overrides.IsTeamMate
	if ov then
		return ov(p)
    end
    
    return self:GetTeam(p) == self:GetTeam(plr)
end

function ESP:GetColor(obj)
	local ov = self.Overrides.GetColor
	if ov then
		return ov(obj)
    end
    local p = self:GetPlrFromChar(obj)
	return p and self.TeamColor and p.Team and p.Team.TeamColor.Color or self.Color
end

function ESP:GetPlrFromChar(char)
	local ov = self.Overrides.GetPlrFromChar
	if ov then
		return ov(char)
	end
	
	return Players:GetPlayerFromCharacter(char)
end

function ESP:Toggle(bool)
    self.Enabled = bool
    if not bool then
        for i,v in pairs(self.Objects) do
            if v.Type == "Box" then --fov circle etc
                if v.Temporary then
                    v:Remove()
                else
                    for i,v in pairs(v.Components) do
                        v.Visible = false
                    end
                end
            end
        end
    end
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

function ESP:AddObjectListener(parent, options)
    local function NewListener(c)
        if type(options.Type) == "string" and c:IsA(options.Type) or options.Type == nil then
            if type(options.Name) == "string" and c.Name == options.Name or options.Name == nil then
                if not options.Validator or options.Validator(c) then
                    local box = ESP:Add(c, {
                        PrimaryPart = type(options.PrimaryPart) == "string" and c:WaitForChild(options.PrimaryPart) or type(options.PrimaryPart) == "function" and options.PrimaryPart(c),
                        Color = type(options.Color) == "function" and options.Color(c) or options.Color,
                        ColorDynamic = options.ColorDynamic,
                        Name = type(options.CustomName) == "function" and options.CustomName(c) or options.CustomName,
                        IsEnabled = options.IsEnabled,
                        RenderInNil = options.RenderInNil
                    })
                    
                    if options.OnAdded then
                        coroutine.wrap(options.OnAdded)(box)
                    end
                end
            end
        end
    end

    if options.Recursive then
        parent.DescendantAdded:Connect(NewListener)
        for i,v in pairs(parent:GetDescendants()) do
            coroutine.wrap(NewListener)(v)
        end
    else
        parent.ChildAdded:Connect(NewListener)
        for i,v in pairs(parent:GetChildren()) do
            coroutine.wrap(NewListener)(v)
        end
    end
end

boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for i,v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
        self.Components[i] = nil
    end
end

function boxBase:Update()
    if not self.PrimaryPart then
        --warn("not supposed to print", self.Object)
        return self:Remove()
    end

    local color
    if ESP.Highlighted == self.Object then
       color = ESP.HighlightColor
    else
        color = self.Color or self.ColorDynamic and self:ColorDynamic() or ESP:GetColor(self.Object) or ESP.Color
    end

    local allow = true
    if ESP.Overrides.UpdateAllow and not ESP.Overrides.UpdateAllow(self) then
        allow = false
    end
    if self.Player and not ESP.TeamMates and ESP:IsTeamMate(self.Player) then
        allow = false
    end
    if self.Player and not ESP.Players then
        allow = false
    end
    if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or type(self.IsEnabled) == "function" and not self:IsEnabled()) then
        allow = false
    end
    if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then
        allow = false
    end

    if not allow then
        for i,v in pairs(self.Components) do
            v.Visible = false
        end
        return
    end

    if ESP.Highlighted == self.Object then
        color = ESP.HighlightColor
    end

    local cf = self.PrimaryPart.CFrame
    if ESP.FaceCamera then
        cf = CFrame.new(cf.p, cam.CFrame.p)
    end
    local size = self.Size
    local locs = {
        TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,size.Y/2,0),
        TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,size.Y/2,0),
        BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,-size.Y/2,0),
        BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,-size.Y/2,0),
        TagPos = cf * ESP.BoxShift * CFrame.new(0,size.Y/2,0),
        Torso = cf * ESP.BoxShift
    }

    if ESP.Boxes then
        local TopLeft, Vis1 = WorldToViewportPoint(cam, locs.TopLeft.p)
        local TopRight, Vis2 = WorldToViewportPoint(cam, locs.TopRight.p)
        local BottomLeft, Vis3 = WorldToViewportPoint(cam, locs.BottomLeft.p)
        local BottomRight, Vis4 = WorldToViewportPoint(cam, locs.BottomRight.p)

        if self.Components.Quad then
            if Vis1 or Vis2 or Vis3 or Vis4 then
                self.Components.Quad.Visible = true
                self.Components.Quad.PointA = Vector2.new(TopRight.X, TopRight.Y)
                self.Components.Quad.PointB = Vector2.new(TopLeft.X, TopLeft.Y)
                self.Components.Quad.PointC = Vector2.new(BottomLeft.X, BottomLeft.Y)
                self.Components.Quad.PointD = Vector2.new(BottomRight.X, BottomRight.Y)
                self.Components.Quad.Color = color
            else
                self.Components.Quad.Visible = false
            end
        end
    else
        self.Components.Quad.Visible = false
    end

    if ESP.Names then
        local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.p)
        
        if Vis5 then
            self.Components.Name.Visible = true
            self.Components.Name.Position = Vector2.new(TagPos.X, TagPos.Y)
            self.Components.Name.Text = self.Name
            self.Components.Name.Color = color
            
            self.Components.Distance.Visible = true
            self.Components.Distance.Position = Vector2.new(TagPos.X, TagPos.Y + 14)
            self.Components.Distance.Text = math.floor((cam.CFrame.p - cf.p).magnitude) .."m away"
            self.Components.Distance.Color = color
        else
            self.Components.Name.Visible = false
            self.Components.Distance.Visible = false
        end
    else
        self.Components.Name.Visible = false
        self.Components.Distance.Visible = false
    end
    
    if ESP.Tracers then
        local TorsoPos, Vis6 = WorldToViewportPoint(cam, locs.Torso.p)

        if Vis6 then
            self.Components.Tracer.Visible = true
            self.Components.Tracer.From = Vector2.new(TorsoPos.X, TorsoPos.Y)
            self.Components.Tracer.To = Vector2.new(cam.ViewportSize.X/2,cam.ViewportSize.Y/ESP.AttachShift)
            self.Components.Tracer.Color = color
        else
            self.Components.Tracer.Visible = false
        end
    else
        self.Components.Tracer.Visible = false
    end
end

function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then
        return warn(obj, "has no parent")
    end

    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color --[[or self:GetColor(obj)]],
        Size = options.Size or self.BoxSize,
        Object = obj,
        Player = options.Player or plrs:GetPlayerFromCharacter(obj),
        PrimaryPart = options.PrimaryPart or obj.ClassName == "Model" and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")) or obj:IsA("BasePart") and obj,
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    if self:GetBox(obj) then
        self:GetBox(obj):Remove()
    end

    box.Components["Quad"] = Draw("Quad", {
        Thickness = self.Thickness,
        Color = color,
        Transparency = 1,
        Filled = false,
        Visible = self.Enabled and self.Boxes
    })
    box.Components["Name"] = Draw("Text", {
		Text = box.Name,
		Color = box.Color,
		Center = true,
		Outline = true,
        Size = 19,
        Visible = self.Enabled and self.Names
	})
	box.Components["Distance"] = Draw("Text", {
		Color = box.Color,
		Center = true,
		Outline = true,
        Size = 19,
        Visible = self.Enabled and self.Names
	})
	
	box.Components["Tracer"] = Draw("Line", {
		Thickness = ESP.Thickness,
		Color = box.Color,
        Transparency = 1,
        Visible = self.Enabled and self.Tracers
    })
    self.Objects[obj] = box
    
    obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil and ESP.AutoRemove ~= false then
            box:Remove()
        end
    end)
    obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if obj.Parent == nil and ESP.AutoRemove ~= false then
            box:Remove()
        end
    end)

    local hum = obj:FindFirstChildOfClass("Humanoid")
	if hum then
        hum.Died:Connect(function()
            if ESP.AutoRemove ~= false then
                box:Remove()
            end
		end)
    end

    return box
end

local function CharAdded(char)
    local p = plrs:GetPlayerFromCharacter(char)
    if not char:FindFirstChild("HumanoidRootPart") then
        local ev
        ev = char.ChildAdded:Connect(function(c)
            if c.Name == "HumanoidRootPart" then
                ev:Disconnect()
                ESP:Add(char, {
                    Name = p.Name,
                    Player = p,
                    PrimaryPart = c
                })
            end
        end)
    else
        ESP:Add(char, {
            Name = p.Name,
            Player = p,
            PrimaryPart = char.HumanoidRootPart
        })
    end
end
local function PlayerAdded(p)
    p.CharacterAdded:Connect(CharAdded)
    if p.Character then
        coroutine.wrap(CharAdded)(p.Character)
    end
end
plrs.PlayerAdded:Connect(PlayerAdded)
for i,v in pairs(plrs:GetPlayers()) do
    if v ~= plr then
        PlayerAdded(v)
    end
end

game:GetService('RunService').RenderStepped:Connect(function()
    cam = workspace.CurrentCamera
    for i,v in (ESP.Enabled and pairs or ipairs)(ESP.Objects) do
        if v.Update then
            local s,e = pcall(v.Update, v)
            if not s then warn("[EU]", e, v.Object:GetFullName()) end
        end
    end
    return ESP
end)
-- End of functions

local function getclientscript()
	return plr.PlayerGui.GUI.Client
end
-- [        ] --

UI.Parent = game['CoreGui']
-- [ Page Scripts ] --
MainButton['MouseButton1Down']:connect(function()
    Layout:JumpTo(Page1)
end)
VisualsButton['MouseButton1Down']:connect(function()
    Layout:JumpTo(Page2)
end)
SettingsButton['MouseButton1Down']:connect(function()
    Layout:JumpTo(Page3)
end)
-- [              ]


--/ Selects, Selects scripts
local MainSelects = Page1.Selections
local VisualSelects = Page2.Selections
local List = Page1.List
local lButton = Page1.Label.Button
local pactive = false
AimBot = false
Inf = false
Recoil = false
Spread = false
Esp = false
Boxes = false
Lines = false
Names = false

lButton.MouseButton1Down:connect(function()
    if not pActive then
        List:TweenSize(UDim2.new(0, 112, 0, 100), 'In', 'Linear', 0.5)
        wait(0.55)
        pActive = true
    else
        List:TweenSize(UDim2.new(0, 112, 0, 0), 'Out', 'Linear', 0.2)
        wait(0.25)
        pActive = false
	end    
end)

MainSelects.Aimbot.Button.MouseButton1Down:connect(function()
    local Slider = MainSelects.Aimbot.Button.Frame
    if not AimBot then
        Slider:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        MainSelects.Aimbot.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        AimBot = true
        
        ee.__namecall = function(self,...)
            local args = {...}
            local method = getnamecallmethod()
            if tostring(self) == "HitPart" and method == "FireServer" then
                args[1] = ClosestPlayerToMouse().Character[HitPart]
                args[2] = ClosestPlayerToMouse().Character[HitPart].Position
                return self.FireServer(self, unpack(args))
            end
            return namecall(self,...)
        end
    else
        Slider:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        MainSelects.Aimbot.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
        AimBot = false
        ee.__namecall = nil
        method = nil
    end
end)

MainSelects.InfAmmo.Button.MouseButton1Down:connect(function()
    local Slider = MainSelects.InfAmmo.Button.Frame
    if not Inf then
        Slider:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        MainSelects.InfAmmo.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        Inf = true
    else
        Slider:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        MainSelects.InfAmmo.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
        Inf = false
        func.ammocount = 30
    end
end)

MainSelects.Recoil.Button.MouseButton1Down:connect(function()
    local Slider = MainSelects.Recoil.Button.Frame
    if not Recoil then
        Slider:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        MainSelects.Recoil.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        Recoil = true
    else
        Slider:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        MainSelects.Recoil.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
        Recoil = false
        func.recoil = 1
    end
end)

MainSelects.Spread.Button.MouseButton1Down:connect(function()
    local Slider = MainSelects.Spread.Button.Frame
    if not Spread then
        Slider:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        MainSelects.Spread.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        Spread = true
    else
        Slider:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        MainSelects.Spread.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
        Spread = false
        func.spreadmodifier = 1
        func.currentspread = 1
    end
end)

MainSelects.ESP.Button.MouseButton1Down:connect(function()
    local Slider = MainSelects.ESP.Button.Frame
    if not Esp then
        Slider:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        MainSelects.ESP.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        Esp = true
        ESP:Toggle(true)
        Boxes = true
        VisualSelects.Boxes.Button.Frame:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        VisualSelects.Boxes.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
    else
        Slider:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        MainSelects.ESP.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
        Esp = false
        ESP:Toggle(false)
        Boxes = false
        VisualSelects.Boxes.Button.Frame:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        VisualSelects.Boxes.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    end
end)

VisualSelects.Boxes.Button.MouseButton1Down:connect(function()
    local Slider =  VisualSelects.Boxes.Button.Frame
    if Boxes then
        VisualSelects.Boxes.Button.Frame:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        VisualSelects.Boxes.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
        Boxes = false
        ESP.Boxes = false
    else
        VisualSelects.Boxes.Button.Frame:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        VisualSelects.Boxes.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        Boxes = true
        ESP.Boxes = true
    end
end)
VisualSelects.Lines.Button.MouseButton1Down:connect(function()
    local Slider = VisualSelects.Lines.Button.Frame
    if not Lines then
        Slider:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        VisualSelects.Lines.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        Lines = true
        ESP.Tracers = true
    else
        Slider:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        VisualSelects.Lines.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
        Lines = false
        ESP.Tracers = false
    end
end)

VisualSelects.Names.Button.MouseButton1Down:connect(function()
    local Slider = VisualSelects.Names.Button.Frame
    if not Names then
        Slider:TweenPosition(UDim2.new(0.733, 0, 0, 0), 'In', 'Linear', 0.1)
        wait(0.1)
        VisualSelects.Names.Button.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        Names = true
        ESP.Names = true
    else
        Slider:TweenPosition(UDim2.new(0, 0, 0, 0), 'Out', 'Linear', 0.1)
        wait(0.1)
        VisualSelects.Names.Button.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
        Names = false
        ESP.Names = false
    end
end)


for i,v in pairs(List:GetChildren()) do
    if v:IsA('TextButton') then
        v.MouseButton1Down:connect(function()
            HitPart = v.Name
            lButton.Text = 'Select | '..v.Text
            List:TweenSize(UDim2.new(0, 112, 0, 0), 'Out', 'Linear', 0.2)
            wait(0.25)
            pActive = false
        end)
    end
end

Page3.Input.Text = '104, 67, 150'

Page3.Input.Changed:connect(function()
    Colors = {}

    local function returnColor(color)
        for i in string.gmatch(color, '%d+') do
            local newi = tonumber(i)
            table.insert(Colors, newi)
        end
        table.concat(Colors, ', ')
    end
    
    returnColor(Page3.Input.Text)
    local info = TweenInfo.new(
        1,
        Enum.EasingStyle.Linear,
        Enum.EasingDirection.Out,
        -1,
        true,
        0
    )
    
    local tw1 = TweenService:Create(Page3.Input.Frame, info, {BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])})
    tw1:play()
end)

Page3.Input.FocusLost:connect(function()
    for i,v in pairs(ButtonLayout:GetChildren()) do
        if v:IsA('TextButton') then
            v.Circle.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
        end
    end
    Page3.Sliders.Jump.Speed.Slider.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
    Page3.Sliders.Speed.Speed.Slider.BackgroundColor3 = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
    ESP.Color = Color3.fromRGB(Colors[1], Colors[2], Colors[3])
end)

local sHeld = false
Page3.Sliders.Jump.Speed.MouseButton1Down:connect(function()
    sHeld = true
    Page3.Sliders.Jump.Speed.Slider.Size = UDim2.new(math.clamp((Mouse.X - Page3.Sliders.Jump.Speed.AbsolutePosition.X)/Page3.Sliders.Jump.Speed.AbsoluteSize.X,0,1),0,1,0)
    Page3.Sliders.Jump.Input.Text = math.floor(Page3.Sliders.Jump.Speed.Slider.Size.X.Scale * 300)
    plr.Character.Humanoid.JumpPower = tonumber(Page3.Sliders.Jump.Input.Text)
    if plr.Character.Humanoid.JumpPower <= 49 then
        plr.Character.Humanoid.JumpPower = 50
        Page3.Sliders.Jump.Speed.Slider.Size = UDim2.new(50/300, 0, 1, 0)
        Page3.Sliders.Jump.Input.Text = '50'
        wait(0.5)
        Page3.Sliders.Jump.Input.Text = ''
    end
end)

game:GetService("UserInputService").InputEnded:Connect(function(input, gp)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		sHeld = false
		wait(0.5)
		Page3.Sliders.Jump.Input.Text = ''
	end
end)

mouse.Move:connect(function()
    if sHeld then
        Page3.Sliders.Jump.Speed.Slider.Size = UDim2.new(math.clamp((Mouse.X - Page3.Sliders.Jump.Speed.AbsolutePosition.X)/Page3.Sliders.Jump.Speed.AbsoluteSize.X,0,1),0,1,0)
        Page3.Sliders.Jump.Input.Text = math.floor(Page3.Sliders.Jump.Speed.Slider.Size.X.Scale * 300)
        plr.Character.Humanoid.JumpPower = tonumber(Page3.Sliders.Jump.Input.Text)
        if plr.Character.Humanoid.JumpPower <= 49 then
            plr.Character.Humanoid.JumpPower = 50
            Page3.Sliders.Jump.Speed.Slider.Size = UDim2.new(50/300, 0, 1, 0)
            Page3.Sliders.Jump.Input.Text = '50'
            wait(0.5)
            Page3.Sliders.Jump.Input.Text = ''
        end
    end
end)

Page3.Sliders.Jump.Input.FocusLost:connect(function()
    if typeof(tonumber(Page3.Sliders.Jump.Input.Text)) == 'number' then
        local num = math.clamp(tonumber(Page3.Sliders.Jump.Input.Text), 0, 300)
        Page3.Sliders.Jump.Speed.Slider.Size = UDim2.new(num/300, 0, 1, 0)
        Page3.Sliders.Jump.Input.Text = tonumber(num)
        plr.Character.Humanoid.JumpPower = tonumber( Page3.Sliders.Jump.Input.Text)
        wait(0.5)
        Page3.Sliders.Jump.Input.Text = ''
        if plr.Character.Humanoid.JumpPower <= 49 then
            plr.Character.Humanoid.JumpPower = 50
            Page3.Sliders.Jump.Speed.Slider.Size = UDim2.new(50/300, 0, 1, 0)
            Page3.Sliders.Jump.Input.Text = '50'
            wait(0.5)
            Page3.Sliders.Jump.Input.Text = ''
        end
    else
        Page3.Sliders.Jump.Input.Text = '50-300 Only'
        wait(0.5)
        Page3.Sliders.Jump.Input.Text = ''
    end
end)

local Held = false

Page3.Sliders.Speed.Speed.MouseButton1Down:connect(function()
    Held = true
    Page3.Sliders.Speed.Speed.Slider.Size = UDim2.new(math.clamp((Mouse.X - Page3.Sliders.Speed.Speed.AbsolutePosition.X)/Page3.Sliders.Speed.Speed.AbsoluteSize.X,0,1),0,1,0)
    Page3.Sliders.Speed.Input.Text = math.floor(Page3.Sliders.Speed.Speed.Slider.Size.X.Scale * 300)
    plr.Character.Humanoid.WalkSpeed =  tonumber(Page3.Sliders.Speed.Input.Text) 
    if plr.Character.Humanoid.JumpPower <= 15 then
        plr.Character.Humanoid.JumpPower = 16
        Page3.Sliders.Speed.Speed.Slider.Size = UDim2.new(16/300, 0, 1, 0)
        Page3.Sliders.Speed.Input.Text = '50'
        wait(0.5)
        Page3.Sliders.Speed.Input.Text = ''
    end
end)

game:GetService("UserInputService").InputEnded:Connect(function(input, gp)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		Held = false
		wait(0.5)
		Page3.Sliders.Speed.Input.Text = ''
	end
end)

mouse.Move:connect(function()
    if Held then
        Page3.Sliders.Speed.Speed.Slider.Size = UDim2.new(math.clamp((Mouse.X - Page3.Sliders.Speed.Speed.AbsolutePosition.X)/Page3.Sliders.Speed.Speed.AbsoluteSize.X,0,1),0,1,0)
        Page3.Sliders.Speed.Input.Text = math.floor(Page3.Sliders.Speed.Speed.Slider.Size.X.Scale * 300)
        plr.Character.Humanoid.WalkSpeed =  tonumber(Page3.Sliders.Speed.Input.Text) 
        if plr.Character.Humanoid.WalkSpeed <= 15 then
            plr.Character.Humanoid.WalkSpeed = 16
            Page3.Sliders.Speed.Speed.Slider.Size = UDim2.new(16/300, 0, 1, 0)
            Page3.Sliders.Speed.Input.Text = '16'
            wait(0.5)
            Page3.Sliders.Speed.Input.Text = ''
        end
    end
end)

Page3.Sliders.Speed.Input.FocusLost:connect(function()
    if typeof(tonumber(Page3.Sliders.Speed.Input.Text)) == 'number' then
        local num = math.clamp(tonumber(Page3.Sliders.Speed.Input.Text), 0, 300)
        Page3.Sliders.Speed.Speed.Slider.Size = UDim2.new(num/300, 0, 1, 0)
        Page3.Sliders.Speed.Input.Text = tonumber(num)
        plr.Character.Humanoid.WalkSpeed =  tonumber(Page3.Sliders.Speed.Input.Text) 
        wait(0.5)
        Page3.Sliders.Speed.Input.Text = ''
        if plr.Character.Humanoid.WalkSpeed <= 15 then
            plr.Character.Humanoid.WalkSpeed = 16
            Page3.Sliders.Speed.Speed.Slider.Size = UDim2.new(16/300, 0, 1, 0)
            Page3.Sliders.Speed.Input.Text = '16'
            wait(0.5)
            Page3.Sliders.Speed.Input.Text = ''
        end
    else
        Page3.Sliders.Speed.Input.Text = '16-300 Only'
        wait(0.5)
        Page3.Sliders.Speed.Input.Text = ''
    end
end)
--\

-- [ Toggle script, inf ammo, other ] --
for i,v in next, getgc(true) do
    if typeof(v) == 'table' and rawget(v, 'countammo') then
        func = v
    end
end

local mt = getrawmetatable(game)
setreadonly(mt, false)
local newindex = mt.__newindex

mt.__newindex = newcclosure(function(Instance, Property, Value)
    if tostring(Instance) == 'Clip' and Instance:IsA('TextLabel') and tostring(Instance.Parent) == 'Ammo' then
        if Property == 'Text' then
            if Inf then
                func.ammocount = 999
            end
            if Recoil then
                func.recoil = 0
            end
            if Spread then
                func.spreadmodifier = 0
                func.currentspread = 0
            end
        end
    end
    return newindex(Instance, Property, Value)
end)

-- [                                ] --

--/ Scripts
Main.Active = true
Main.Draggable = true

for i,v in pairs(ButtonLayout:GetChildren()) do
    if not v:IsA('UIListLayout') then
        local ColorR = v.BackgroundColor3.R * 255; local ColorG = v.BackgroundColor3.G * 255; local ColorB = v.BackgroundColor3.B * 255
        local HoverIn = TweenService:Create(v,TweenInfo.new(0.17, Enum.EasingStyle.Linear, Enum.EasingDirection.In),{BackgroundColor3 = Color3.fromRGB(ColorR + 25, ColorG + 25, ColorB + 25)})
        local HoverOut = TweenService:Create(v,TweenInfo.new(0.35, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out),{BackgroundColor3 = Color3.fromRGB(ColorR, ColorG, ColorB)})

        v.MouseEnter:Connect(function()
            HoverIn:play()
        end)
        v.MouseLeave:Connect(function()
            HoverOut:play()
        end)

        local Circle = v.Circle
        v.MouseButton1Down:connect(function(X, Y)
            local Clone = Circle:Clone()
            Clone.Parent = v
            Clone.Position = UDim2.new(0, X - v.AbsolutePosition.X, 0, Y - v.AbsolutePosition.Y - 36)
            Clone.Visible = true
            TweenService:Create(
                Clone,
                TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.Out),
                {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1.5, 0, 1.5, 0)
                }
	        ):play()
	        wait(0.4)
	        Clone:remove()
        end)
    end
end

UIS.InputBegan:connect(function(InputObj, Process)
    if InputObj.KeyCode == Enum.KeyCode.Equals then
        if Main.Visible then
            Main.Visible = false
        else
            Main.Visible = true
        end
    end
end)


local last, start
local Update = {}
function hUpdate()
    last = tick()
    for Index = #Update, 1, -1 do
        Update[Index + 1] = (Update[Index] >= last - 1) and Update[Index] or nil
    end
    Update[1] = last
    local CurFPS = (tick() - Start >= 1 and #Update) or (#Update / (tick() - Start))
    CurFPS = math.floor(CurFPS)
    FpsLabel.Text = 'FPS | ' .. CurFPS .. ''
end
Start = tick()
game:GetService('RunService').Heartbeat:connect(hUpdate)
--\
